#! /bin/bash

SUCCESSFUL_TEST=true

grep_port () {
    echo "Activiating ports:"
    grep -A8 $1 docker-compose.yml | grep -A2 ports | grep "-"
}

setup () {
    # echo 'This is depreciated. use dev_tools/main_tool.py -setup help'
    echo 'Creating directory structures'
    mkdir db
    mkdir db/archive
    mkdir logs
    mkdir logs/archive
    mkdir logs/behave
    mkdir logs/behave/old
    mkdir out
    mkdir out/archive

    echo ''
    echo '########################################'
    echo 'Creating container'
    run

    echo ''
    echo '########################################'
    echo 'starting setup'
    python3 dev_tools/main_tool.py -setup help || python dev_tools/main_tool.py -setup help

    echo ''
    echo '########################################'
    echo 'Use this basic command [python3/python] dev_tools/main_tool.py -setup'

}

setup_check() {
    if [ ! -f 'etc/key.yml' ]; then
        echo 'Weatherman is not set up yet'
        setup
    fi

    if [ ! -f 'etc/weather_api_private.yml' ]; then
        echo 'Weatherman is not set up yet'
        setup
    fi
}

clean () {
    # Move log files to the logs/archive directory to work with a clean log file. 
    # When the log file is moved a prefix of the date is added. 

    echo "Archiving log files from the logs/ dir"
    
    move_file () {
        if [ -f ${1}${2} ]; then
            echo "Archiving log file ${1}${2} to ${3}${4}${2}"
            mv ${1}${2} ${3}${4}${2};
        fi

    }

    remove_file () {
        PAUSETIMER=5
        if [ -f ${1} ]; then
            echo ''
            echo "About to delete file '${1}'. Pausing for ${PAUSETIMER} to silently confirm consent."
            sleep ${PAUSETIMER}
            rm -f ${1}
        fi
        echo 'Delete successful, continuing'
    }

    DATE=$(date '+%Y%m%d%H%M%S')
    move_file "logs/" "weatherman.log" "logs/archive/" "${DATE}_"
    move_file "logs/" "weatherman_startup.log" "logs/archive/" "${DATE}_"
    move_file "logs/" "weatherman_dev.log" "logs/archive/" "${DATE}_"

    remove_file "etc/city_list.gz"

    echo "Done!"
}

run () {
    # Use docker-compose to spin up the app. 
    setup_check
    grep_port "weather"
    docker-compose up -d weather
}

dev () {
    # Spin up the dev environment. 
    grep_port "dev"
    docker-compose up dev
}

stop () {
    # Stop weatherman containers

    echo "Stopping all weatherman containers"

    docker stop $(docker ps --filter name=weatherman* -aq)
}

clense () {
    # Find all containers that have weatherman* in the name and stop/rm them. 

    echo "About to stop/rm all weatherman containers. If one is running in terminal this cmd will wait"

    docker stop $(docker ps --filter name=weatherman* -aq)
    docker rm $(docker ps --filter name=weatherman* -aq)
    # docker ps --filter name=weatherman* -aq | xargs docker stop | xargs docker rm
}


lint () {
    # Run the functional tests. 
    docker-compose run --rm lint

    if [[ $? -eq 1 ]]; then 
        SUCCESSFUL_TEST=false
        echo 'Test failed'
    fi
}

unit () {
    # Run the unit tests. 
    # This includes flake
    docker-compose run --rm unit

    if [[ $? -eq 1 ]]; then 
        SUCCESSFUL_TEST=false
        echo 'Test failed'
    fi
}

functional () {
    # Run the functional tests. 
    docker-compose run --rm functional

    if [[ $? -eq 1 ]]; then 
        SUCCESSFUL_TEST=false
        echo 'Test failed'
    fi
}

tests () {
    # Run each test. 
    # I have them seporated in case i want to grep for things in the test or save them to files. 
    lint
    unit
    functional
    if [[ $SUCCESSFUL_TEST == true ]]
    then
        echo 'The tests were successful'
    else
        echo 'The tests were unsuccessful'
    fi
}

about () {
    echo "
    This is a makeshift Makefile
    setup               - Set up dir and files (run if its a new cloan)
                            For more info run 'build setup help'
                            For a full program setup run 'build setup reset-all'
    clean               - Move log files to the logs/archive directory
    run                 - Run the container
    dev                 - Run a dev instance
    clean-run           - Clean then run
    clean-dev           - Clean then dev
    stop                - Stop weatherman containers
    clense-containers   - Stop/rm weatherman containers
    unit                - Unit tests
    functional          - Functional tests
    tests               - Unit then Functional
    help                - Uhhh speaking...
    "
}

case "$1" in
    # Setup
    setup)
        setup "${@}"
        ;;

    clean)
        clean
        ;;

    # Running
    run)
        run
        ;;
    dev)
        dev
        ;;
    clean-run)
        clean
        run
        ;;
    clean-dev)
        clean
        dev
        ;;

    # Stopping
    stop)
        stop
        ;;
    clense-containers)
        clense
        ;;

    # Testing
    lint)
        lint
        ;;
    unit)
        unit
        ;;
    functional)
        functional
        ;;
    tests)
        tests
        ;;

    # Help
    help)
        about
        ;;

    *)
        about
        ;;
esac
